version: '3.8'

services:
  nginx:
    build: "./containers/nginx"
    restart: always
    ports:
      - "80:80"
    container_name: "nginx"
    networks:
      - app
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/signin || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  node:
    build: "./containers/node"
    container_name: "node_master"
    restart: always
    networks:
      - app
      - db
    volumes:
      - ./containers/node:/node
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DATABASE=${POSTGRES_DATABASE}
      - SESSION_SECRET_KEY=${SESSION_SECRET_KEY}
      - ARTICLE_API_KEY=${ARTICLE_API_KEY}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - FD_DELTA=${FD_DELTA}
      - INSTANCE=MASTER
      - FAILURE_DETECTOR=${FAILURE_DETECTOR}
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/signin || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  node1:
    extends:
      service: node
    container_name: "node1"
    ports:
      - "3001:3000"
    environment:
      - INSTANCE=node1

  node2:
    extends:
      service: node
    container_name: "node2"
    ports:
      - "3002:3000"
    environment:
      - INSTANCE=node2

  node3:
    extends:
      service: node
    container_name: "node3"
    ports:
      - "3003:3000"
    environment:
      - INSTANCE=node3

  postgres:
    build: "./containers/postgres"
    restart: always
    container_name: "postgres"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGUSER=${POSTGRES_USER}
    ports:
      - "5423:5432"
    networks:
      - db
    volumes:
      - ./containers/postgres/data:/var/lib/postgresql/data
      - ./containers/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_USER} -p 5432"]
      interval: 10s
      timeout: 10s
      retries: 5

  redis:
    image: redis
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - db

networks:
  app:
  db:
